{"version":3,"file":"component---src-pages-account-page-js-332345e357ddc8f19291.js","mappings":"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","sources":["webpack://gloss/./src/pages/accountPage.js"],"sourcesContent":["import * as React from \"react\"\nimport app from \"gatsby-plugin-firebase-v9.0\"\nimport { getAuth } from \"firebase/auth\"\nimport { collection, getFirestore, doc, setDocs, getDocs, query, where, QuerySnapshot } from \"firebase/firestore\"\n\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst news = collection(db, \"NewsList\");\nvar docRef = '';\nvar docSnap = '';\nvar viewingStory = false;\nvar currentStory = \"\";\nvar currentStoryData;\nvar currentUserData;\n// styles\nconst pageStyles = {\n  color: \"#232129\",\n  padding: 96,\n  fontFamily: \"-apple-system, Roboto, sans-serif, serif\",\n}\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\nconst paragraphStyles = {\n  marginBottom: 48,\n}\n\nclass CheckForm extends React.Component {\n  state = {\n    link: \"\",\n    impartial: \"\",\n    object: \"\",\n    accuracy: \"\",\n    relevency: \"\"\n  }\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    })\n  }\n  handleSubmitLink = async event => {\n    event.preventDefault();\n    if (this.state.link == \"\") {\n      alert('Error: Link Section is empty');\n      return\n    }\n    currentStory = this.state.link;\n    const docQuery = query(news, where(\"link\", \"==\", this.state.link))\n    docSnap = await getDocs(docQuery);\n    // if (!docSnap.exists()) {\n    //   alert(\"Error: Story does not exist\");\n    //   return\n    // }\n    docSnap.forEach((doc) => {\n      currentStoryData = doc.data();\n      console.log(currentStoryData.name)\n    });\n    if (Number.isInteger(this.state.impartial) && Number.isInteger(this.state.object)  && Number.isInteger(this.state.accuracy)  && Number.isInteger(this.state.relevency) ) {\n      updateScores(this.state.link, this.state.impartial, this.state.object, this.state.accuracy, this.state.relevency, currentStoryData.ratingCount);\n    }\n    else if (this.state.impartial == \"\" && this.state.object == \"\" && this.state.accuracy == \"\" && this.state.relevency == \"\"){\n      alert(\"News Link: \" + currentStoryData.link + \n      \"\\nStory Name:\" + currentStoryData.name + \n      \"\\nPublisher: \" + currentStoryData.publisher + \n      \"\\nAccuracy Score: \" + currentStoryData.AccuracyScore + \n      \"\\nImparial Score: \" + currentStoryData.ImpartialScore + \n      \"\\nObject Score: \" + currentStoryData.ObjectScore + \n      \"\\nRelevency Score: \" + currentStoryData.RelevencyScore + \n      \"\\nRating Count: \" + currentStoryData.ratingCount);\n    }\n    else {\n      alert('Error: Voting Section is Incomplete');\n    }\n    currentStoryData = \"\";\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmitLink}>\n        Link:\n          <input\n            type=\"text\"\n            name=\"link\"\n            value={this.state.link}\n            onChange={this.handleInputChange}\n          /> <br />\n        Rate Impartial Score:  <input\n            type=\"text\"\n            name=\"impartial\"\n            value={this.state.impartial}\n            onChange={this.handleInputChange}\n          /> <br />\n        Rate Object Score: <input\n            type=\"text\"\n            name=\"object\"\n            value={this.state.object}\n            onChange={this.handleInputChange}\n          /> <br />\n        Rate Accuracy Score: <input\n            type=\"text\"\n            name=\"accuracy\"\n            value={this.state.accuracy}\n            onChange={this.handleInputChange}\n          /> <br />\n        Rate Relevency Score: <input\n            type=\"text\"\n            name=\"relevency\"\n            value={this.state.relevency}\n            onChange={this.handleInputChange}\n          />\n        <button type=\"submit\">Submit</button> <br />\n\n      </form>\n      \n    )\n  }\n}\n\nasync function updateScores(link, impartial, object, accuracy, relevency, voteTotal) {\n  var newVoteTotal = voteTotal + 1;\n  var newImpartial = ((currentStoryData.ImpartialScore * voteTotal) + impartial) / newVoteTotal\n  var newObject = ((currentStoryData.ObjectScore * voteTotal) + object) / newVoteTotal\n  var newAccuracy = ((currentStoryData.AccuracyScore * voteTotal) + accuracy) / newVoteTotal\n  var newRelevency = ((currentStoryData.RelevencyScore * voteTotal) + relevency) / newVoteTotal\n  await setDocs(doc(db, \"NewsList\", link), {\n    ImpartialScore: newImpartial,\n    ObjectScore: newObject,\n    AccuracyScore: newAccuracy,\n    RelevencyScore: newRelevency,\n    ratingCount: newVoteTotal\n  });\n}\n\n// markup\nconst ScorePage = () => {\n  return (\n    <main style={pageStyles}>\n      <title>View Story</title>\n      <h1 style={headingStyles}>\n      View Stories\n      <br />\n      </h1>\n      <p style={paragraphStyles}>\n      Enter a link to the story who's score you want to rate:{\" \"}\n      </p>\n      <CheckForm />\n\n      \n      </main>\n    )\n}\n\nexport default ScorePage"],"names":["currentStoryData","db","getAuth","app","getFirestore","news","collection","pageStyles","color","padding","fontFamily","headingStyles","marginTop","marginBottom","maxWidth","paragraphStyles","CheckForm","state","link","impartial","object","accuracy","relevency","handleInputChange","event","target","value","name","setState","handleSubmitLink","preventDefault","alert","docQuery","query","where","getDocs","forEach","doc","data","console","log","Number","isInteger","updateScores","ratingCount","publisher","AccuracyScore","ImpartialScore","ObjectScore","RelevencyScore","render","onSubmit","this","type","onChange","React","voteTotal","newVoteTotal","newImpartial","newObject","newAccuracy","newRelevency","setDocs","style"],"sourceRoot":""}